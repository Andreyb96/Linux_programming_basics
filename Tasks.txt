1  Введение в разработку для Linux
	1.1 Основной инструментарий разработчика Linux
		1.1.1 Утилиту GNU make
		1.1.2 14.04
	1.2 Динамические библиотеки и линковка
		1.2.1 с++filt используется для восстановления исходного имени функций (Demangle) на языках на C++ и Java; Для вывода символических имен объектного(бинарного) файла используется nm; Для сборки динамической библиотеки gcc требуется указать опцию --shared; В основе работы make лежит информация о зависимостях частей проекта
		1.2.2 _Z8getValuei - getValue(int); _Z8getValuePFviE - getValue(void (*)(int)); _Z8getValuePvi - getValue(void*, int); _Z8getValuev - getValue()
	1.3 Runtime линковка. Libdl
		1.3.1 gcc main.c -fPIC -ldl -o loader
		1.3.2 Программист должен вручную привести указатель возвращаемый dlsym к типу вызываемой функции; extern "C" в с++ файле отключает мэнглинг экпортируемых имен
2 Файлы и файловые системы
	2.1 Базовые функции работы с файлами
		2.1.1 ssize_t write(int fd, const void *buf, size_t count); int open(const char *pathname, int flags, mode_t mode); int creat(const char *pathname, mode_t mode)
		2.1.2 O_CREAT - Файл будет создан при открытии, если не существует, при наличии соответствующих прав; O_APPEND - Режим добавления. Перед каждым вызовом write указатель на текущую позицию будет перемещен в конец файла; O_RDONLY - Файл в режиме только для чтения; O_TRUNC - Если файл существует, то при открытии его содержимое будет удалено; O_RDWR - Файл открывается для чтения и записи
		2.1.3 Все файлы связаны иерархической системой имен, начинающейся с символа /; Файл – это именованная последовательность байт на жестком диске; Файловый интерфейс может использоваться для доступа к устройствам или к памяти ядра ОС
	2.2 Работа с каталогами и путями
		2.2.1 readdir вернул NULL
	2.3 Ссылки
		2.3.1 Makefile является жесткой ссылкой на makefile; cat libMylib.so.2.3.1 вернет ошибку "No such file or directory"; file2 является символической (мягкой) ссылкой на file1; makefile является жесткой ссылкой на Makefile
	2.4 Файловая система /proc. Построение дерева процессов
		2.4.1 4
		2.4.2 /proc/3471
		2.4.3 Прочитать из файла /proc/CURRENT/status значение параметра PPid
	2.5 Отладка программ в Linux
		2.5.1 gdb -p 1234
3 Процессы и потоки
	3.1 Жизненный цикл процесса в Linux
		3.1.1 пространство файловых имен; Полномочия (credentials); Память (адресное пространство); Код возврата; Состояние регистров; PID
	3.2 Создание процессов fork/exec
		3.2.1 fork копирует текущий процесс, таким образом, что состояние памяти оказывается одинаковым у родителя и потомка; fork может быть использован без exec, если код потомка содержится в том же бинарном файле что и код родителя; exec может быть вызван без fork
		3.2.2 Семейство функций wait позволяет дождаться изменения состояния процесса-потомка; Если родитель не запросил код возврата у завершенного процесса-потомка, то он превращается в "зомби"; wait является синхронной и блокирует процесс, который ее вызвал
4 Взаимодействие процессов
	4.1 Виды межпроцессного взаимодействия в Linux
		4.1.1 BUFSIZ задает размер буфера ввода-вывода по-умолчанию, и не может быть меньше 256; С помощью setvbuf можно заставить fprintf немедленно синхронизировать вывод с файлом; Разные приложения могут читать из одного и того же файла не заботясь о синхронизации
5 Сетевые возможности
	5.2 Принципы организации IP сетей
		5.2.1 Протоколы доступа к электронной почте работают на прикладном уровне сети; Сокеты — стандартный системный интерфейс для сетевых взаимодействий; Маршрутизация работает на сетевом уровне; MAC-адрес позволяет обеспечить доступ к физической среде; Сокеты абстрагируют множество используемых адресов (семейство адресов)
		5.2.2 511
		5.2.3 Шлюз — это узел в локальной сети, обеспечивающий передачу трафика во внешнюю сеть (или из внешней сети)
	5.3 Понятие сокета
		5.3.1 Broadcast
		5.3.2 socket; bind; sendto; recvfrom
		5.3.3 socket; bind; listen; accept; recv; send